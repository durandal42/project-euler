'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
'''

import common
import itertools

def euler012(num_divisors):
  for n in itertools.count(1):
    # the formula for the nth triangle number is n*(n+1)/2.
    # 
    # n and n+1 must be mutually prime, one of them must be even, and
    # they will still be mutually prime after the even one has been divided
    # by 2.
    # 
    # if a*b=c, and a,b are mutually prime, then
    #   num_divisors(c) = num_divisors(a) * num_divisors(b)
    # The latter is faster to compute.
    #
    # So, the nth triangle number is known to be a product of two mutually prime
    # factors which enable us to compute its divisor count more quickly.
    if n % 2:
      divisors = common.num_divisors((n+1)/2) * common.num_divisors(n)
    else:
      divisors = common.num_divisors(n+1) * common.num_divisors(n/2)
    if divisors > num_divisors:
      return n*(n+1)/2

common.assertEquals(28, euler012(5))

common.submit(euler012(500), expected=76576500)
